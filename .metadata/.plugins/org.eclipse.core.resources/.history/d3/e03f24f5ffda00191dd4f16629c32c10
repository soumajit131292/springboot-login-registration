package com.bridgelabz.service;

import java.util.List;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.stereotype.Service;

import com.bridgelabz.dao.UserDaoImpl;
import com.bridgelabz.dto.UserDto;
import com.bridgelabz.model.UserDetailsForRegistration;
import com.bridgelabz.util.TokenGeneration;

@Service
public class UserServiceImpl implements UserService {
	@Autowired
	private UserDaoImpl userdaoimpl;
	@Autowired
	private BCrypt bcryptEncoder;
	@Autowired
	private ModelMapper modelmapper;
	@Autowired
	private JavaMailSender emailSender;
	@Autowired
	private TokenGeneration token;

	public UserDetailsForRegistration dtoToEntity(UserDto details) {
		UserDetailsForRegistration userDetails = modelmapper.map(details, UserDetailsForRegistration.class);
		return userDetails;
	}

	public UserDto entityToDto(UserDetailsForRegistration details) {
		//List<UserDto> userDetails=null;
		//int count=0;
		//for(UserDetailsForRegistration obj:details) {
			//System.out.println(count);

		UserDto	userDetails=(modelmapper.map(details, UserDto.class));
			//System.out.println(count);
		//}
		System.out.println(userDetails);
		return userDetails;
	}

	@Override
	public void sendEmail(UserDto details) throws MessagingException {
		MimeMessage message = emailSender.createMimeMessage();
		MimeMessageHelper helper = new MimeMessageHelper(message, true);
		helper.setTo("soumajit131292@gmail.com");
		helper.setSubject("hello");
		helper.setText("http://localhost:8080/"+token.generString(details));
		emailSender.send(message);
	}

	@Override
	public List<UserDto> retriveUserFromDatabase() {
		//return entityToDto( userdaoimpl.retriveUserDetails());
		List<UserDto> users=null; 
		List<UserDetailsForRegistration> details=userdaoimpl.retriveUserDetails();
		//System.out.println(details);
		for(UserDetailsForRegistration obj: details)
		{
			users.add(entityToDto(obj));
			//System.out.println(users);
		}
		return users;
	}
/*	public List<UserDto> retriveUserFromDatabase() {
		//return entityToDto( userdaoimpl.retriveUserDetails());
	   UserDto users=null; 
		List<UserDto> details=userdaoimpl.retriveUserDetails();
		System.out.println(details);
				return details;*/


	@Override
	public void deleteFromDatabase(Integer id) {
		userdaoimpl.deletFromDatabase(id);
	}

	private String hashPassword(String plainTextPassword) {
		String salt = bcryptEncoder.gensalt();
		return bcryptEncoder.hashpw(plainTextPassword, salt);
	}

	@Override
	public int saveToDatabase(UserDto userDetails) {
		String password = userDetails.getPassword();
		userDetails.setPassword(hashPassword(password));
		 userdaoimpl.setToDatabase(dtoToEntity(userDetails));
		 return 1;
	}

	@Override
	public int updateUser(Integer id, UserDto userDetails) {
		return userdaoimpl.updateMobileNumberToDatabase(id, dtoToEntity(userDetails));
	}
}