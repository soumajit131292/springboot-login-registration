package com.bridgelabz.controller;

import java.time.LocalDateTime;
import java.util.List;

import javax.mail.MessagingException;

import org.jboss.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bridgelabz.dto.UserDto;
import com.bridgelabz.exception.ErrorResponse;
import com.bridgelabz.model.LoginUser;
import com.bridgelabz.service.UserService;

@RestController
@RequestMapping("/api")
public class UserRegistrationController {

	Logger logger = Logger.getLogger(this.getClass());

	@Autowired
	private UserService userService;

	@GetMapping("/get")
	public List<UserDto> getDetails() {
		return userService.retriveUserFromDatabase();
	}

	@PostMapping("/users")
	public ResponseEntity<ErrorResponse> saveToDatabase(@RequestBody UserDto userDetails) throws MessagingException {
		userService.saveToDatabase(userDetails);
		ErrorResponse response=new ErrorResponse();
		response.setStatus(HttpStatus.OK.value());
		response.setMessage("success");
		response.setTimeStamp(new LocalDateTime().now());
		return new ResponseEntity<>(response,HttpStatus.OK);
	}
	

	@GetMapping("/verify/{token}")
	public void verifyUserByMail(@PathVariable("token") String token) {
		System.out.println("hello in verify");
		if (userService.verifyUser(token)) {
			// userService.changeActiveStatus();
			logger.info("success");
		} else {
		}
	}

	@PostMapping("/login")
	public boolean login(@RequestBody LoginUser loginUser) {
      System.out.println(loginUser.getEmail());
      System.out.println(loginUser.getPassword());
		if( userService.doLogin(loginUser))
		{
			
		}
		else
		{}
			
	}

	@DeleteMapping("/deleteuser/{id}")
	public void deleteUserById(@PathVariable("id") Integer id) {
		userService.deleteFromDatabase(id);
	}

	@PutMapping("/updateuser/{id}")
	public void updateUser(@PathVariable("id") Integer id, @RequestBody UserDto userDetails) {
		userService.updateUser(id, userDetails);
	}
}